// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Strive.Infrastructure.Data;

#nullable disable

namespace Strive.Api.Migrations
{
    [DbContext(typeof(AppDbContext))]
    partial class AppDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Strive.Core.Entities.Exercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("VARCHAR(15)")
                        .HasColumnName("Category");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(200)")
                        .HasColumnName("Description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(50)")
                        .HasColumnName("Name");

                    b.HasKey("Id");

                    b.HasIndex(new[] { "Name" }, "IX_Exercises_Name");

                    b.ToTable("Exercises");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Category = "Cardio",
                            Description = "High-intensity activity that improves cardiovascular capacity and quickly burns calories.",
                            Name = "Running"
                        },
                        new
                        {
                            Id = 2,
                            Category = "Cardio",
                            Description = "Aerobic exercise involving opening and closing arms and legs in sync, stimulating the heart and lungs.",
                            Name = "Jumping Jacks"
                        },
                        new
                        {
                            Id = 3,
                            Category = "Strength",
                            Description = "Knee and hip flexion movement that strengthens legs and glutes.",
                            Name = "Squat"
                        },
                        new
                        {
                            Id = 4,
                            Category = "Strength",
                            Description = "Exercise that uses body weight to strengthen chest, triceps, and shoulders.",
                            Name = "Push-up"
                        },
                        new
                        {
                            Id = 5,
                            Category = "Strength",
                            Description = "Isometric position that activates abs, lower back, and shoulders, strengthening the core.",
                            Name = "Plank"
                        },
                        new
                        {
                            Id = 6,
                            Category = "Strength",
                            Description = "Step forward with knee flexion, strengthening legs and glutes.",
                            Name = "Lunge"
                        },
                        new
                        {
                            Id = 7,
                            Category = "Flexibility",
                            Description = "Bending the torso forward to stretch the back of the thighs.",
                            Name = "Hamstring Stretch"
                        },
                        new
                        {
                            Id = 8,
                            Category = "Flexibility",
                            Description = "Pulling the arm across the chest to stretch deltoids and trapezius.",
                            Name = "Shoulder Stretch"
                        },
                        new
                        {
                            Id = 9,
                            Category = "Flexibility",
                            Description = "Sequence of spinal flexion and extension movements that improve mobility and relaxation.",
                            Name = "Cat-Cow Pose"
                        },
                        new
                        {
                            Id = 10,
                            Category = "Cardio",
                            Description = "A variation of jumping jacks combined with squats, working both cardiovascular endurance and leg strength.",
                            Name = "Squat Jack"
                        });
                });

            modelBuilder.Entity("Strive.Core.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Strive.Core.Entities.Workout", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("NVARCHAR(100)")
                        .HasColumnName("Name");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Strive.Core.Entities.WorkoutExercise", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ExerciseId")
                        .HasColumnType("int");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ExerciseId");

                    b.HasIndex(new[] { "WorkoutId", "ExerciseId" }, "IX_WorkoutExercises_WorkoutId_ExerciseId")
                        .IsUnique();

                    b.ToTable("WorkoutExercises");
                });

            modelBuilder.Entity("Strive.Core.Entities.WorkoutSession", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Done")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("BIT")
                        .HasDefaultValue(false)
                        .HasColumnName("Done");

                    b.Property<int>("WorkoutId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutSessions");
                });

            modelBuilder.Entity("Strive.Core.Entities.User", b =>
                {
                    b.OwnsOne("Strive.Core.ValueObjects.Email", "Email", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Address")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("email");

                            b1.HasKey("UserId");

                            b1.HasIndex(new[] { "Address" }, "IX_Users_Email");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");

                            b1.OwnsOne("Strive.Core.ValueObjects.Verification", "Verification", b2 =>
                                {
                                    b2.Property<int>("EmailUserId")
                                        .HasColumnType("int");

                                    b2.Property<string>("Code")
                                        .IsRequired()
                                        .HasColumnType("CHAR(6)")
                                        .HasColumnName("VerificationCode");

                                    b2.Property<DateTime?>("ExpiresAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("VerificationCodeExpiresAt");

                                    b2.Property<DateTime?>("VerifiedAt")
                                        .HasColumnType("datetime2")
                                        .HasColumnName("VerificationVerifiedAt");

                                    b2.HasKey("EmailUserId");

                                    b2.ToTable("Users");

                                    b2.WithOwner()
                                        .HasForeignKey("EmailUserId");
                                });

                            b1.Navigation("Verification")
                                .IsRequired();
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.Name", "Name", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("NVARCHAR(20)")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("nvarchar(max)")
                                .HasColumnName("LastName");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.Password", "Password", b1 =>
                        {
                            b1.Property<int>("UserId")
                                .HasColumnType("int");

                            b1.Property<string>("Hash")
                                .IsRequired()
                                .HasColumnType("VARCHAR(100)")
                                .HasColumnName("PasswordHash");

                            b1.Property<string>("ResetCode")
                                .IsRequired()
                                .HasColumnType("CHAR(6)")
                                .HasColumnName("PasswordResetCode");

                            b1.HasKey("UserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserId");
                        });

                    b.Navigation("Email")
                        .IsRequired();

                    b.Navigation("Name")
                        .IsRequired();

                    b.Navigation("Password")
                        .IsRequired();
                });

            modelBuilder.Entity("Strive.Core.Entities.Workout", b =>
                {
                    b.HasOne("Strive.Core.Entities.User", "User")
                        .WithMany("Workouts")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Users_Workouts");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Strive.Core.Entities.WorkoutExercise", b =>
                {
                    b.HasOne("Strive.Core.Entities.Exercise", "Exercise")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("ExerciseId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_Exercises_WorkoutExercises");

                    b.HasOne("Strive.Core.Entities.Workout", "Workout")
                        .WithMany("WorkoutExercises")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Workouts_WorkoutsExercises");

                    b.OwnsOne("Strive.Core.ValueObjects.ExerciseTime", "Duration", b1 =>
                        {
                            b1.Property<int>("WorkoutExerciseId")
                                .HasColumnType("int");

                            b1.Property<int?>("TimeInSeconds")
                                .HasColumnType("INT")
                                .HasColumnName("Duration");

                            b1.HasKey("WorkoutExerciseId");

                            b1.ToTable("WorkoutExercises");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutExerciseId");
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.ExerciseWeight", "Weight", b1 =>
                        {
                            b1.Property<int>("WorkoutExerciseId")
                                .HasColumnType("int");

                            b1.Property<float?>("Weight")
                                .HasColumnType("REAL")
                                .HasColumnName("Weight");

                            b1.HasKey("WorkoutExerciseId");

                            b1.ToTable("WorkoutExercises");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutExerciseId");
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.WorkoutRepetitions", "Repetitions", b1 =>
                        {
                            b1.Property<int>("WorkoutExerciseId")
                                .HasColumnType("int");

                            b1.Property<byte?>("Repetitions")
                                .HasColumnType("TINYINT")
                                .HasColumnName("Repetitions");

                            b1.HasKey("WorkoutExerciseId");

                            b1.ToTable("WorkoutExercises");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutExerciseId");
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.WorkoutSets", "Sets", b1 =>
                        {
                            b1.Property<int>("WorkoutExerciseId")
                                .HasColumnType("int");

                            b1.Property<byte>("Sets")
                                .HasColumnType("TINYINT")
                                .HasColumnName("Sets");

                            b1.HasKey("WorkoutExerciseId");

                            b1.ToTable("WorkoutExercises");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutExerciseId");
                        });

                    b.Navigation("Duration")
                        .IsRequired();

                    b.Navigation("Exercise");

                    b.Navigation("Repetitions")
                        .IsRequired();

                    b.Navigation("Sets")
                        .IsRequired();

                    b.Navigation("Weight")
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Strive.Core.Entities.WorkoutSession", b =>
                {
                    b.HasOne("Strive.Core.Entities.Workout", "Workout")
                        .WithMany("WorkoutSessions")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Workouts_WorkoutSessions");

                    b.OwnsOne("Strive.Core.ValueObjects.ScheduledAt", "ScheduledAt", b1 =>
                        {
                            b1.Property<int>("WorkoutSessionId")
                                .HasColumnType("int");

                            b1.Property<DateTime?>("Date")
                                .HasColumnType("DATETIME2")
                                .HasColumnName("ScheduledAt");

                            b1.HasKey("WorkoutSessionId");

                            b1.ToTable("WorkoutSessions");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutSessionId");
                        });

                    b.OwnsOne("Strive.Core.ValueObjects.WorkoutCommentary", "Commentary", b1 =>
                        {
                            b1.Property<int>("WorkoutSessionId")
                                .HasColumnType("int");

                            b1.Property<string>("Commentary")
                                .HasColumnType("NVARCHAR(200)")
                                .HasColumnName("Commentary");

                            b1.HasKey("WorkoutSessionId");

                            b1.ToTable("WorkoutSessions");

                            b1.WithOwner()
                                .HasForeignKey("WorkoutSessionId");
                        });

                    b.Navigation("Commentary")
                        .IsRequired();

                    b.Navigation("ScheduledAt")
                        .IsRequired();

                    b.Navigation("Workout");
                });

            modelBuilder.Entity("Strive.Core.Entities.Exercise", b =>
                {
                    b.Navigation("WorkoutExercises");
                });

            modelBuilder.Entity("Strive.Core.Entities.User", b =>
                {
                    b.Navigation("Workouts");
                });

            modelBuilder.Entity("Strive.Core.Entities.Workout", b =>
                {
                    b.Navigation("WorkoutExercises");

                    b.Navigation("WorkoutSessions");
                });
#pragma warning restore 612, 618
        }
    }
}
